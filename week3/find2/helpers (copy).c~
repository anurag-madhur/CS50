/**
 * helpers.c
 *
 * Helper functions for Problem Set 3.
 */
 
//#include <cs50.h>

#include "helpers.h"
#include<stdio.h>
/**
 * Returns true if value is in array of n values, else false.
 */
int search(int value, int values[], int n)
{
    // TODO: implement a searching algorithm
    int mid,firstTerm=0,lastTerm=n-1;int flag=0;
    while(firstTerm<=lastTerm)
    {   
        mid=(firstTerm+lastTerm)/2;
        if(values[mid]==value)
        {
            flag=1;
            return 1;
        }
        else if(values[mid]>value)
        {
           lastTerm=mid-1;
           
        }
        else if(values[mid]<value)
        {
            firstTerm=mid+1;
        }
     }
    if(flag==0)
    return 0;
}

/**
 * Sorts array of n values.
 */
void sort(int values[], int n)
{
        int bucket[10][5],buck[10],b[10];
        int i,j,k,l,num,div,large,passes;
        div=1;
        num=0;
        large=arr[0];
        for(i=0 ; i < n ; i++)
        {
            if(arr[i] > large)
        	{
                large = arr[i];
            }
            while(large > 0)
            {
        		num++;
        		large = large/10;
        	}
            for(passes=0 ; passes < num ; passes++)
            {
                for(k=0 ; k < 10 ; k++)
                {
               		buck[k] = 0;
              	}
                for(i=0 ; i < n  ;i++)
        		{
         			l = ((arr[i]/div)%10);
               		bucket[l][buck[l]++] = arr[i];
        		}
                i=0;
            	for(k=0 ; k< 10 ; k++)
               	{
        			for(j=0 ; j < buck[k] ; j++)
                	{
                		arr[i++] = bucket[k][j];
     				}
            	}
            	div*=10;
                }
            }
        }
}
